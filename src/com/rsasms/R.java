/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.rsasms;

public final class R {
    public static final class array {
        /**  Email address types from android.provider.Contacts. This could be used when adding a new e-mail address for a contact, for example. 
         */
        public static final int emailAddressTypes=0x7f060001;
        /**  Instant Messenger ID types from android.provider.Contacts. This could be used when adding a new IM for a contact, for example. 
         */
        public static final int imAddressTypes=0x7f060003;
        /**  Instant Message protocols/providers from android.provider.Contacts 
         */
        public static final int imProtocols=0x7f060005;
        /**  Organization types from android.provider.Contacts. This could be used when adding a new organization for a contact, for example. 
         */
        public static final int organizationTypes=0x7f060004;
        /**  Phone number types from android.provider.Contacts. This could be used when adding a new phone number for a contact, for example. 
         */
        public static final int phoneTypes=0x7f060000;
        /**  Postal address types from android.provider.Contacts. This could be used when adding a new address for a contact, for example. 
         */
        public static final int postalAddressTypes=0x7f060002;
    }
    public static final class attr {
    }
    public static final class drawable {
        public static final int android_icon_125=0x7f020000;
        public static final int icon=0x7f020001;
    }
    public static final class id {
        public static final int LinearLayout01=0x7f090020;
        public static final int TableRow01=0x7f090035;
        public static final int acknowledge_button=0x7f09002e;
        public static final int button_four=0x7f09000e;
        public static final int button_one=0x7f09000b;
        public static final int button_three=0x7f09000d;
        public static final int button_two=0x7f09000c;
        public static final int compose=0x7f090017;
        public static final int console=0x7f09001e;
        public static final int consoleentry=0x7f090000;
        public static final int consoleentry_message=0x7f090003;
        public static final int consoleentry_originator=0x7f090002;
        public static final int consoleentry_picture=0x7f090001;
        public static final int delivery_alpha=0x7f090004;
        public static final int delivery_beta=0x7f090005;
        public static final int delivery_delta=0x7f090008;
        public static final int delivery_epsilon=0x7f090009;
        public static final int delivery_gamma=0x7f090006;
        public static final int delivery_gamma_button=0x7f090007;
        public static final int dialogbox=0x7f09000a;
        public static final int listrowDate=0x7f090014;
        public static final int listrowDescription=0x7f090012;
        public static final int listrowTitle=0x7f090011;
        public static final int listrowdetail=0x7f090013;
        public static final int listrowentry=0x7f090010;
        public static final int listrowfolder_active=0x7f090015;
        public static final int listrowfolder_decrypted=0x7f090016;
        public static final int listrowrsa_name=0x7f09001a;
        public static final int listrowrsa_number=0x7f090018;
        public static final int listrowrsa_usersa=0x7f090019;
        public static final int listrowunsentDate=0x7f09001b;
        public static final int listrowunsentDescription=0x7f09001c;
        public static final int listrowword=0x7f09001d;
        public static final int listview=0x7f09000f;
        public static final int message=0x7f09002c;
        public static final int messagetitle=0x7f090021;
        public static final int originator=0x7f09002b;
        public static final int recipientbar=0x7f090023;
        public static final int recipientlist=0x7f09001f;
        public static final int recipientstart=0x7f090024;
        public static final int reply_button=0x7f09002d;
        public static final int scrollview=0x7f09002f;
        public static final int selector1=0x7f090029;
        public static final int selector2=0x7f090027;
        public static final int selector3=0x7f090022;
        public static final int selector4=0x7f090026;
        public static final int selector5=0x7f09002a;
        public static final int selectorbar=0x7f090028;
        public static final int sending=0x7f090030;
        public static final int sending_detail=0x7f090031;
        public static final int sending_detail_recipient=0x7f090033;
        public static final int sending_detail_send=0x7f090036;
        public static final int sending_detail_title=0x7f090032;
        public static final int sending_detail_usersa=0x7f090034;
        public static final int sendingrow=0x7f090037;
        public static final int sendingrow_messageid=0x7f090039;
        public static final int sendingrow_name=0x7f09003a;
        public static final int sendingrow_node=0x7f090038;
        public static final int tolist=0x7f09003b;
        public static final int tolist_button=0x7f09003f;
        public static final int tolist_buttonbar=0x7f090040;
        public static final int tolist_linearlayout=0x7f09003d;
        public static final int tolist_scrollview=0x7f09003c;
        public static final int tolist_textview=0x7f09003e;
        public static final int useRSA=0x7f090025;
    }
    public static final class layout {
        public static final int consoleentry=0x7f030000;
        public static final int delivery=0x7f030001;
        public static final int dialogbox=0x7f030002;
        public static final int list=0x7f030003;
        public static final int listrow=0x7f030004;
        public static final int listrowcontact=0x7f030005;
        public static final int listrowdetail=0x7f030006;
        public static final int listrowfolder=0x7f030007;
        public static final int listrowrsa=0x7f030008;
        public static final int listrowsms=0x7f030009;
        public static final int listrowunsent=0x7f03000a;
        public static final int listrowword=0x7f03000b;
        public static final int main=0x7f03000c;
        public static final int message=0x7f03000d;
        public static final int scrollview=0x7f03000e;
        public static final int sending=0x7f03000f;
        public static final int sendingrow=0x7f030010;
        public static final int tolist=0x7f030011;
    }
    public static final class plurals {
        /**  This is used to express that something will occur some number of abbreviated days in the future (e.g., in 5 days). 
         */
        public static final int abbrev_in_num_days=0x7f07000f;
        /**  This is used to express that something will occur some number of abbreviated hours in the future (e.g., in 5 hrs). 
         */
        public static final int abbrev_in_num_hours=0x7f07000e;
        /**  This is used to express that something will occur some number of abbreviated minutes in the future (e.g., in 5 mins). 
         */
        public static final int abbrev_in_num_minutes=0x7f07000d;
        /**  This is used to express that something will occur some number of abbreviated seconds in the future (e.g., in 5 secs). 
         */
        public static final int abbrev_in_num_seconds=0x7f07000c;
        /**  This is used to express that something occurred some number of abbreviated days in the past (e.g., 5 days ago). 
         */
        public static final int abbrev_num_days_ago=0x7f07000b;
        /**  This is used to express that something occurred some number of abbreviated hours in the past (e.g., 5 hrs ago). 
         */
        public static final int abbrev_num_hours_ago=0x7f07000a;
        /**  This is used to express that something occurred some number of abbreviated minutes in the past (e.g., 5 mins ago). 
         */
        public static final int abbrev_num_minutes_ago=0x7f070009;
        /**  This is used to express that something occurred some number of abbreviated seconds in the past (e.g., 5 secs ago). 
         */
        public static final int abbrev_num_seconds_ago=0x7f070008;
        /**  This is used to express that something will occur some number of days in the future (e.g., in 5 days). 
         */
        public static final int in_num_days=0x7f070007;
        /**  This is used to express that something will occur some number of hours in the future (e.g., in 5 hours). 
         */
        public static final int in_num_hours=0x7f070006;
        /**  This is used to express that something will occur some number of minutes in the future (e.g., in 5 minutes). 
         */
        public static final int in_num_minutes=0x7f070005;
        /**  This is used to express that something will occur some number of seconds in the future (e.g., in 5 seconds). 
         */
        public static final int in_num_seconds=0x7f070004;
        /**  This is used to express that something occurred some number of days in the past (e.g., 5 days ago). 
         */
        public static final int num_days_ago=0x7f070003;
        /**  This is used to express that something occurred some number of hours in the past (e.g., 5 hours ago). 
         */
        public static final int num_hours_ago=0x7f070002;
        /**  This is used to express that something occurred some number of minutes in the past (e.g., 5 minutes ago). 
         */
        public static final int num_minutes_ago=0x7f070001;
        /**  This is used to express that something occurred some number of seconds in the past (e.g., 5 seconds ago). 
         */
        public static final int num_seconds_ago=0x7f070000;
        /**  A notification is shown when there are open wireless networks nearby.  This is the notification's title. 
         */
        public static final int wifi_available=0x7f070010;
        /**  A notification is shown when there are open wireless networks nearby.  This is the notification's message. 
         */
        public static final int wifi_available_detailed=0x7f070011;
    }
    public static final class string {
        /**  Displayed as the title for a success/failure report enabling/disabling call barring. 
         */
        public static final int BaMmi=0x7f050036;
        /**  Displayed to confirm to the user that caller ID will not be restricted on the next call or in general. 
         */
        public static final int CLIRDefaultOffNextCallOff=0x7f05003c;
        /**  Displayed to confirm to the user that caller ID will not be restricted on the next call but usually is. 
         */
        public static final int CLIRDefaultOffNextCallOn=0x7f05003b;
        /**  Displayed to confirm to the user that caller ID will be not restricted on the next call even though it usually is. 
         */
        public static final int CLIRDefaultOnNextCallOff=0x7f05003a;
        /**  Displayed to confirm to the user that caller ID will be restricted on the next call as usual. 
         */
        public static final int CLIRDefaultOnNextCallOn=0x7f050039;
        /**  Displayed to tell the user that they cannot change the caller ID setting. 
         */
        public static final int CLIRPermanent=0x7f05003e;
        /**  Displayed as the title for a success/failure report enabling/disabling call forwarding. 
         */
        public static final int CfMmi=0x7f050034;
        /**  Displayed as the title for a success/failure report enabling/disabling caller ID. 
         */
        public static final int ClipMmi=0x7f050032;
        /**  Displayed as the title for a success/failure report enabling/disabling caller ID. 
         */
        public static final int ClirMmi=0x7f050033;
        /**  Displayed as the title for a success/failure report enabling/disabling call waiting. 
         */
        public static final int CwMmi=0x7f050035;
        /**  Quoted name for 12am, uppercase first letter 
         */
        public static final int Midnight=0x7f0501de;
        /**  Quoted name for 12pm, uppercase first letter 
         */
        public static final int Noon=0x7f0501dc;
        /**  Displayed as the title for a success/failure report changing the SIM PIN. 
         */
        public static final int PinMmi=0x7f050038;
        /**  Displayed as the title for a success/failure report changing the SIM password. 
         */
        public static final int PwdMmi=0x7f050037;
        /**  Notification title to tell the user that restricted state is changed by access control. 
         */
        public static final int RestrictedChangedTitle=0x7f05003f;
        /**  Displayed to tell the user that all voice service is blocked by access control. 
         */
        public static final int RestrictedOnAll=0x7f050043;
        /**  Displayed to tell the user that data service is blocked by access control. 
         */
        public static final int RestrictedOnData=0x7f050040;
        /**  Displayed to tell the user that emergency service is blocked by access control. 
         */
        public static final int RestrictedOnEmergency=0x7f050041;
        /**  Displayed to tell the user that normal service is blocked by access control. 
         */
        public static final int RestrictedOnNormal=0x7f050042;
        /**  Button to close error alert when a video cannot be played 
         */
        public static final int VideoView_error_button=0x7f0501c6;
        /**  Text for error alert when a video container is not valid for progressive download/playback. 
         */
        public static final int VideoView_error_text_invalid_progressive_playback=0x7f0501c4;
        /**  Text for error alert when a video cannot be played. it can be used by any app. 
         */
        public static final int VideoView_error_text_unknown=0x7f0501c5;
        /**  Title for error alert when a video cannot be played.  it can be used by any app. 
         */
        public static final int VideoView_error_title=0x7f0501c3;
        /**  Format string for abbreviated month alone.
         Example: "Oct" 
         */
        public static final int abbrev_month=0x7f050200;
        /**  Format string for abbreviated month and day.
         Example: "Oct 9" 
         */
        public static final int abbrev_month_day=0x7f0501ff;
        /**  Format string for abbreviated month, day, and year.
         Example: "Oct 9, 2007" 
         */
        public static final int abbrev_month_day_year=0x7f0501fd;
        /**  Format string for abbreviated month and year.
         Example: "Oct 2007" 
         */
        public static final int abbrev_month_year=0x7f0501fe;
        /**  Shown in LauncherActivity when the requested target Intent didn't return any matching Activities, leaving the list empty. 
         */
        public static final int activity_list_empty=0x7f0502ac;
        /**  Item on EditText context menu, used to add a word to the
         input method dictionary. 
         */
        public static final int addToDictionary=0x7f050254;
        /**  Text of the alert that is displayed when an application is not responding. 
         */
        public static final int aerr_application=0x7f050265;
        /**  Text of the alert that is displayed when an application has crashed. 
         */
        public static final int aerr_process=0x7f050266;
        /**  Title of the alert when an application has crashed. 
         */
        public static final int aerr_title=0x7f050264;
        /**  Option to always use the selected application resolution in the future. See the "Complete action using" dialog title
         */
        public static final int alwaysUse=0x7f050260;
        /**  AM - as in morning - as in 10:30 AM 
         */
        public static final int am=0x7f0501c7;
        /**  Label for the Android system components when they are shown to the user. 
         */
        public static final int android_system_label=0x7f050079;
        /**  Text of the alert that is displayed when an application is not responding. 
         */
        public static final int anr_activity_application=0x7f050268;
        /**  Text of the alert that is displayed when an application is not responding. 
         */
        public static final int anr_activity_process=0x7f050269;
        /**  Text of the alert that is displayed when an application is not responding. 
         */
        public static final int anr_application_process=0x7f05026a;
        /**  Text of the alert that is displayed when an application is not responding. 
         */
        public static final int anr_process=0x7f05026b;
        /**  Title of the alert when an application is not responding. 
         */
        public static final int anr_title=0x7f050267;
        public static final int app_name=0x7f0502bb;
        /**  Displayed when a SIM PIN password is entered incorrectly. 
         */
        public static final int badPin=0x7f05002c;
        /**  Displayed when a SIM PUK password is entered incorrectly. 
         */
        public static final int badPuk=0x7f05002d;
        /**  A message that appears when the battery level is getting low in a dialog.  This is appened to the subtitle of the low battery alert. 
         */
        public static final int battery_low_percent_format=0x7f05018d;
        /**  When the battery is low, this is displayed to the user in a dialog. The subtitle of the low battery alert. 
         */
        public static final int battery_low_subtitle=0x7f05018c;
        /**  When the battery is low, this is displayed to the user in a dialog.  The title of the low battery alert. 
         */
        public static final int battery_low_title=0x7f05018b;
        /**  The big percent text in the middle of the battery icon that appears when you plug in
         the charger. This indicates the current status of the battery.  
         */
        public static final int battery_status_charging=0x7f05018a;
        /**  The big percent text in the middle of the battery icon that appears when you plug in
         the charger. 
         */
        public static final int battery_status_text_percent_format=0x7f050189;
        /**  String used to display the date. This is the string to say something happened more than 1 month ago. 
         */
        public static final int beforeOneMonthDurationPast=0x7f0501a7;
        /**  Suffix added to a number to signify size in bytes. 
         */
        public static final int byteShort=0x7f050018;
        /**  Preference framework strings. 
         */
        public static final int cancel=0x7f050259;
        public static final int candidates_style=0x7f05029f;
        /**  Default text for a button that can be toggled on and off. 
         */
        public static final int capital_off=0x7f05025e;
        /**  Default text for a button that can be toggled on and off. 
         */
        public static final int capital_on=0x7f05025d;
        /**  Displayed when the call forwarding query was forwarded. 
         */
        public static final int cfTemplateForwarded=0x7f05004d;
        /**  Displayed when the call forwarding query will be forwarded after some time. 
         */
        public static final int cfTemplateForwardedTime=0x7f05004e;
        /**  Displayed when the call forwarding query was not able to be forwarded. 
         */
        public static final int cfTemplateNotForwarded=0x7f05004c;
        /**  Displayed when the call forwarding query was set but forwarding is not enabled. 
         */
        public static final int cfTemplateRegistered=0x7f05004f;
        /**  Displayed when the call forwarding query was set but forwarding is not enabled. 
         */
        public static final int cfTemplateRegisteredTime=0x7f050050;
        /**  Default title for the activity chooser, when one is not given. Android allows multiple activities to perform an action.  for example, there may be many ringtone pickers installed.  A dialog is shown to the user allowing him to pick which activity should be used.  This is the title. 
         */
        public static final int chooseActivity=0x7f050262;
        /**  Text displayed when the user selects the check box for setting default application.  See the "Use by default for this action" check box. 
         */
        public static final int clearDefaultHintMsg=0x7f050261;
        /**  A notification is shown when there is a sync error.  This is the text that will scroll through the notification bar (will be seen by the user as he uses another application). 
         */
        public static final int contentServiceSync=0x7f050061;
        /**  A notification is shown when there is a sync error.  This is the title of the notification.  It will be seen in the pull-down notification tray. 
         */
        public static final int contentServiceSyncNotificationTitle=0x7f050062;
        /**  A notification is shown when there is a sync error.  This is the message of the notification.  It describes the error, in this case is there were too many deletes. The argument is the type of content, for example Gmail or Calendar. It will be seen in the pull-down notification tray. 
         */
        public static final int contentServiceTooManyDeletesNotificationDesc=0x7f050063;
        /**  Item on EditText context menu. This action is used to cut selected the text into the clipboard. 
         */
        public static final int copy=0x7f05024f;
        /**  Item on EditText context menu. This action is used to copy all the text into the clipboard. 
         */
        public static final int copyAll=0x7f050250;
        /**  Item on EditText context menu. This action is used to copy a URL from the edit field into the clipboard. 
         */
        public static final int copyUrl=0x7f050252;
        /**  This string appears (on two lines) when you type a number into contacts search, to let you create a contact whose phone number is the number you typed.  The first line will be in bigger type than the second. 
         */
        public static final int create_contact_using=0x7f0502b8;
        /**  Item on EditText context menu.  This action is used to cut selected the text into the clipboard.  
         */
        public static final int cut=0x7f05024d;
        /**  Item on EditText context menu. This action is used to cut all the text into the clipboard. 
         */
        public static final int cutAll=0x7f05024e;
        /**  Calendar spinner item, to select that an event recurs every day. 
         */
        public static final int daily=0x7f0501bf;
        /**  Format indicating a range of dates, from one date to another.
         Example: "Dec 31, 2007 - Jan 1, 2008" 
         */
        public static final int date1_date2=0x7f0501cd;
        /**  Format indicating a range of time, from a time on one day to a time on another day. 
         Example: "Dec 31, 2007, 8am - Jan 1, 2008, 5pm" 
         */
        public static final int date1_time1_date2_time2=0x7f0501cc;
        /**  Format string for date and 24-hour time of day.
         Example: 23:59:15 Jan 31 2008 
         */
        public static final int date_and_time=0x7f0501e4;
        /**  Format indicating a specific date and time.
         Example: "Dec 31, 2007, 11:00 am" 
         */
        public static final int date_time=0x7f0501d2;
        /**  Name of the button in the date/time picker to accept the date/time change 
         */
        public static final int date_time_set=0x7f050283;
        /**  Appened to express the value is this unit of time: singular day 
         */
        public static final int day=0x7f0501ab;
        /**  The full spelled out version of the day of the week. 
         */
        public static final int day_of_week_long_friday=0x7f050206;
        /**  The full spelled out version of the day of the week. 
         */
        public static final int day_of_week_long_monday=0x7f050202;
        /**  The full spelled out version of the day of the week. 
         */
        public static final int day_of_week_long_saturday=0x7f050207;
        /**  The full spelled out version of the day of the week. 
         */
        public static final int day_of_week_long_sunday=0x7f050201;
        /**  The full spelled out version of the day of the week. 
         */
        public static final int day_of_week_long_thursday=0x7f050205;
        /**  The full spelled out version of the day of the week. 
         */
        public static final int day_of_week_long_tuesday=0x7f050203;
        /**  The full spelled out version of the day of the week. 
         */
        public static final int day_of_week_long_wednesday=0x7f050204;
        /**  An abbreviated day of the week.  Three characters typically in western languages.
         In US English: "Fri" stands for Friday 
         */
        public static final int day_of_week_medium_friday=0x7f05020d;
        /**  An abbreviated day of the week.  Three characters typically in western languages.
         In US English: "Mon" stands for Monday 
         */
        public static final int day_of_week_medium_monday=0x7f050209;
        /**  An abbreviated day of the week.  Three characters typically in western languages.
         In US English: "Sat" stands for Saturday 
         */
        public static final int day_of_week_medium_saturday=0x7f05020e;
        /**  An abbreviated day of the week.  Three characters typically in western languages.
         In US English: "Sun" stands for Sunday 
         */
        public static final int day_of_week_medium_sunday=0x7f050208;
        /**  An abbreviated day of the week.  Three characters typically in western languages.
         In US English: "Thu" stands for Thursday 
         */
        public static final int day_of_week_medium_thursday=0x7f05020c;
        /**  An abbreviated day of the week.  Three characters typically in western languages.
         In US English: "Tue" stands for Tuesday 
         */
        public static final int day_of_week_medium_tuesday=0x7f05020a;
        /**  An abbreviated day of the week.  Three characters typically in western languages.
         In US English: "Wed" stands for Wednesday 
         */
        public static final int day_of_week_medium_wednesday=0x7f05020b;
        /**  An abbreviated day of the week.  Two characters typically in western languages.
         In US English: "Fr" stands for Friday 
         */
        public static final int day_of_week_short_friday=0x7f050214;
        /**  An abbreviated day of the week.  Two characters typically in western languages.
         In US English: "Mo" stands for Monday 
         */
        public static final int day_of_week_short_monday=0x7f050210;
        /**  An abbreviated day of the week.  Two characters typically in western languages.
         In US English: "Sa" stands for Saturday 
         */
        public static final int day_of_week_short_saturday=0x7f050215;
        /**  An abbreviated day of the week.  Two characters typically in western languages.
         In US English: "Su" stands for Sunday 
         */
        public static final int day_of_week_short_sunday=0x7f05020f;
        /**  An abbreviated day of the week.  Two characters typically in western languages.
         In US English: "Th" stands for Thursday 
         */
        public static final int day_of_week_short_thursday=0x7f050213;
        /**  An abbreviated day of the week.  Two characters typically in western languages.
         In US English: "Tu" stands for Tuesday 
         */
        public static final int day_of_week_short_tuesday=0x7f050211;
        /**  An abbreviated day of the week.  Two characters typically in western languages.
         In US English: "We" stands for Wednesday 
         */
        public static final int day_of_week_short_wednesday=0x7f050212;
        /**  An abbreviated day of the week.  One character if that is unique.  Two if necessary.
         In US English: "F" stands for Friday 
         */
        public static final int day_of_week_shorter_friday=0x7f05021b;
        /**  An abbreviated day of the week.  One character if that is unique.  Two if necessary.
         In US English: "M" stands for Monday 
         */
        public static final int day_of_week_shorter_monday=0x7f050217;
        /**  An abbreviated day of the week.  One character if that is unique.  Two if necessary.
         In US English: "Sa" stands for Saturday 
         */
        public static final int day_of_week_shorter_saturday=0x7f05021c;
        /**  An abbreviated day of the week.  One character if that is unique.  Two if necessary.
         In US English: "Su" stands for Sunday 
         */
        public static final int day_of_week_shorter_sunday=0x7f050216;
        /**  An abbreviated day of the week.  One character if that is unique.  Two if necessary.
         In US English: "Th" stands for Thursday 
         */
        public static final int day_of_week_shorter_thursday=0x7f05021a;
        /**  An abbreviated day of the week.  One character if that is unique.  Two if necessary.
         In US English: "Tu" stands for Tuesday 
         */
        public static final int day_of_week_shorter_tuesday=0x7f050218;
        /**  An abbreviated day of the week.  One character if that is unique.  Two if necessary.
         In US English: "W" stands for Wednesday 
         */
        public static final int day_of_week_shorter_wednesday=0x7f050219;
        /**  An abbreviated day of the week.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "F" stands for Friday 
         */
        public static final int day_of_week_shortest_friday=0x7f050222;
        /**  An abbreviated day of the week.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "M" stands for Monday 
         */
        public static final int day_of_week_shortest_monday=0x7f05021e;
        /**  An abbreviated day of the week.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "S" stands for Saturday 
         */
        public static final int day_of_week_shortest_saturday=0x7f050223;
        /**  An abbreviated day of the week.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "S" stands for Sunday 
         */
        public static final int day_of_week_shortest_sunday=0x7f05021d;
        /**  An abbreviated day of the week.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "T" stands for Thursday 
         */
        public static final int day_of_week_shortest_thursday=0x7f050221;
        /**  An abbreviated day of the week.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "T" stands for Tuesday 
         */
        public static final int day_of_week_shortest_tuesday=0x7f05021f;
        /**  An abbreviated day of the week.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "W" stands for Wednesday 
         */
        public static final int day_of_week_shortest_wednesday=0x7f050220;
        /**  Appened to express the value is this unit of time: plural days 
         */
        public static final int days=0x7f0501ac;
        /**  Button allowing a developer to connect a debugger to an application that is not responding. 
         */
        public static final int debug=0x7f05026e;
        /**  What the UI should display for "Msisdn" unless overridden by the SIM
         */
        public static final int defaultMsisdnAlphaTag=0x7f050023;
        /**  What the UI should display for "voice mail" unless overridden by the SIM
         */
        public static final int defaultVoiceMailAlphaTag=0x7f050022;
        /**  Security Permissions strings
 The default permission group for any permissions that have not explicitly set a group. 
         */
        public static final int default_permission_group=0x7f050284;
        /**  This string appears (on two lines) when you type a number into contacts search, to let you dial the phone number you typed.  The first line will be in bigger type than the second. 
         */
        public static final int dial_number_using=0x7f0502b7;
        /**  This is the generic "attention" string to be used in attention dialogs.  Typically
         combined with setIcon(android.R.drawable.ic_dialog_alert) 
         */
        public static final int dialog_alert_title=0x7f05025c;
        /**  Title for EditText context menu 
         */
        public static final int editTextMenuTitle=0x7f050255;
        /**  Format string for times like "1:43:33" (1 hour, 43 minutes, 33 seconds) 
         */
        public static final int elapsed_time_short_format_h_mm_ss=0x7f050249;
        /**  Format string for durations like "01:23" (1 minute, 23 seconds) 
         */
        public static final int elapsed_time_short_format_mm_ss=0x7f050248;
        /**  Used to replace a range of characters in text that is too wide
         for the space allocated to it. 
         */
        public static final int ellipsis=0x7f05001f;
        /**  This can be used in any application wanting to disable the text "Emergency number" 
         */
        public static final int emergency_call_dialog_number_for_display=0x7f050163;
        /**  How to display the lack of a phone number 
         */
        public static final int emptyPhoneNumber=0x7f050020;
        /**  Calendar spinner item, to select that an event recurs every weekday. 
         */
        public static final int every_weekday=0x7f0501be;
        public static final int ext_media_badremoval_notification_message=0x7f0502a7;
        /**  Shown when external media is unsafely removed 
         */
        public static final int ext_media_badremoval_notification_title=0x7f0502a6;
        public static final int ext_media_checking_notification_message=0x7f0502a1;
        /**  External media notification strings 
 Shown when external media is being checked 
         */
        public static final int ext_media_checking_notification_title=0x7f0502a0;
        public static final int ext_media_nofs_notification_message=0x7f0502a3;
        /**  Shown when external media is blank (or unsupported filesystem) 
         */
        public static final int ext_media_nofs_notification_title=0x7f0502a2;
        public static final int ext_media_nomedia_notification_message=0x7f0502ab;
        /**  Shown when external media is missing 
         */
        public static final int ext_media_nomedia_notification_title=0x7f0502aa;
        public static final int ext_media_safe_unmount_notification_message=0x7f0502a9;
        /**  Shown when external media has been safely removed 
         */
        public static final int ext_media_safe_unmount_notification_title=0x7f0502a8;
        public static final int ext_media_unmountable_notification_message=0x7f0502a5;
        /**  Shown when external media is unmountable (corrupt)) 
         */
        public static final int ext_media_unmountable_notification_title=0x7f0502a4;
        /**  See EXTMEDIA_FORMAT.    This is the button text to format the sd card. 
         */
        public static final int extmedia_format_button_format=0x7f05029a;
        /**  See EXTMEDIA_FORMAT.   This is the message. 
         */
        public static final int extmedia_format_message=0x7f050299;
        /**  External media format dialog strings 
 This is the label for the activity, and should never be visible to the user. 
 See EXTMEDIA_FORMAT.  EXTMEDIA_FORMAT_DIALOG:  After the user selects the notification, a dialog is shown asking if he wants to format the SD card.  This is the title. 
         */
        public static final int extmedia_format_title=0x7f050298;
        /**  Title of the alert when something went wrong in the factory test. 
         */
        public static final int factorytest_failed=0x7f05018e;
        /**  Error message displayed when the factory test could not be started. 
         */
        public static final int factorytest_no_action=0x7f050190;
        /**  Error message displayed when a non-system application tries to start a factory test. 
         */
        public static final int factorytest_not_system=0x7f05018f;
        /**  Button to restart the device after the factory test. 
         */
        public static final int factorytest_reboot=0x7f050191;
        public static final int fast_scroll_alphabet=0x7f05029d;
        public static final int fast_scroll_numeric_alphabet=0x7f05029e;
        /**  Button allowing the user to close an application that is not responding. This will kill the application. 
         */
        public static final int force_close=0x7f05026c;
        /**  Used in the list of which days of the week a calendar event recurrs on 
         */
        public static final int friday=0x7f0501bc;
        /**  Date format string used in contexts where the user has said they
         want the day of the month first, as used in Europe, with the month
         fully spelled out.  You can remove the comma or add a period,
         or make other punctuation changes appropriate for your locale. 
         */
        public static final int full_date_day_first=0x7f0501d6;
        /**  Date format string used in contexts where the user has said they
         want the month first, as used in the USA, with the month fully
         spelled out.  You can remove the comma or add a period,
         or make other punctuation changes appropriate for your locale. 
         */
        public static final int full_date_month_first=0x7f0501d5;
        /**  Shown in gadget hosts (e.g. the home screen) when there was an error inflating
    the gadget. 
         */
        public static final int gadget_host_error_inflating=0x7f0502b0;
        /**  Suffix added to a number to signify size in gigabytes. 
         */
        public static final int gigabyteShort=0x7f05001b;
        /**  label for item that locks the phone in the phone options dialog 
         */
        public static final int global_action_lock=0x7f050070;
        /**  label for item that turns off power in phone options dialog 
         */
        public static final int global_action_power_off=0x7f050071;
        /**  status message in phone options dialog for when silent mode is disabled 
         */
        public static final int global_action_silent_mode_off_status=0x7f050074;
        /**  status message in phone options dialog for when silent mode is enabled 
         */
        public static final int global_action_silent_mode_on_status=0x7f050073;
        /**  label for item that enables silent mode in phone options dialog 
         */
        public static final int global_action_toggle_silent_mode=0x7f050072;
        /**  Title of the Global Actions Dialog 
         */
        public static final int global_actions=0x7f05006f;
        /**  status message in phone options dialog for when airplane mode is off 
         */
        public static final int global_actions_airplane_mode_off_status=0x7f050077;
        /**  status message in phone options dialog for when airplane mode is on 
         */
        public static final int global_actions_airplane_mode_on_status=0x7f050076;
        /**  label for item that toggles airplane mode 
         */
        public static final int global_actions_toggle_airplane_mode=0x7f050075;
        /**  Shown when there is content loading from the internet into a dialog. 
         */
        public static final int googlewebcontenthelper_loading=0x7f050289;
        /**  Appened to express the value is this unit of time: singular hour 
         */
        public static final int hour=0x7f0501ad;
        /**  A format string for 12-hour time of day, just the hour, not the minute, with lower-case "am" or "pm" (example: "3pm"). 
         */
        public static final int hour_ampm=0x7f050183;
        /**  A format string for 12-hour time of day, just the hour, not the minute, with capital "AM" or "PM" (example: "3PM"). 
         */
        public static final int hour_cap_ampm=0x7f050184;
        /**  A format string for 12-hour time of day, with lower-case "am" or "pm" (example: "12:30pm"). 
         */
        public static final int hour_minute_ampm=0x7f050181;
        /**  A format string for 12-hour time of day, with capital "AM" or "PM" (example: "12:30PM"). 
         */
        public static final int hour_minute_cap_ampm=0x7f050182;
        /**  Appened to express the value is this unit of time: plural hours 
         */
        public static final int hours=0x7f0501ae;
        /**  Displayed when a web request failed because we don't know the exact reason. 
         */
        public static final int httpError=0x7f050052;
        /**  Displayed when a web request failed because the authentication failed. 
         */
        public static final int httpErrorAuth=0x7f050055;
        /**  Displayed when a web request failed because the URL isn't in a valid form. 
         */
        public static final int httpErrorBadUrl=0x7f05005d;
        /**  Displayed when a web request failed because there was a connection error. 
         */
        public static final int httpErrorConnect=0x7f050057;
        /**  Displayed when a web request failed because the a secure connection couldn't be made to the server.
         */
        public static final int httpErrorFailedSslHandshake=0x7f05005c;
        /**  Displayed when a request failed because we failed to open the file. 
         */
        public static final int httpErrorFile=0x7f05005e;
        /**  Displayed when a request failed because the file wasn't found. 
         */
        public static final int httpErrorFileNotFound=0x7f05005f;
        /**  Displayed when a web request failed because there was an input or output error. 
         */
        public static final int httpErrorIO=0x7f050058;
        /**  Displayed when a web request failed because the URL could not be found. 
         */
        public static final int httpErrorLookup=0x7f050053;
        /**  Displayed when a web request was successful. 
         */
        public static final int httpErrorOk=0x7f050051;
        /**  Displayed when a web request failed because the authentication with the proxy failed. 
         */
        public static final int httpErrorProxyAuth=0x7f050056;
        /**  Displayed when a web request failed because the site tried to redirect us one too many times 
         */
        public static final int httpErrorRedirectLoop=0x7f05005a;
        /**  Displayed when a web request failed because the request timed out 
         */
        public static final int httpErrorTimeout=0x7f050059;
        /**  Displayed when a request failed because there are too many requests right now. 
         */
        public static final int httpErrorTooManyRequests=0x7f050060;
        /**  Displayed when a web request failed because the site's authentication scheme is not supported by us. 
         */
        public static final int httpErrorUnsupportedAuthScheme=0x7f050054;
        /**  Displayed when a web request failed because the protocol of the server is not supported. 
         */
        public static final int httpErrorUnsupportedScheme=0x7f05005b;
        /**  Long label for a button on a full-screen input method for an unknown action. 
         */
        public static final int ime_action_default=0x7f0502b6;
        /**  Long label for a button on a full-screen input method for the "Done" action. 
         */
        public static final int ime_action_done=0x7f0502b5;
        /**  Long label for a button on a full-screen input method for the "Go" action. 
         */
        public static final int ime_action_go=0x7f0502b1;
        /**  Long label for a button on a full-screen input method for the "Next" action. 
         */
        public static final int ime_action_next=0x7f0502b4;
        /**  Long label for a button on a full-screen input method for the "Search" action. 
         */
        public static final int ime_action_search=0x7f0502b2;
        /**  Long label for a button on a full-screen input method for the "Send" action. 
         */
        public static final int ime_action_send=0x7f0502b3;
        /**  EditText context menu 
         */
        public static final int inputMethod=0x7f050253;
        /**  Displayed when a SIM PIN password is too long or too short. 
         */
        public static final int invalidPin=0x7f05002f;
        /**  Message in a javascript dialog asking if the user wishes to leave the
             current page 
         */
        public static final int js_dialog_before_unload=0x7f050195;
        /**  Title for a JavaScript dialog. "The page at <url of current page> says:" 
         */
        public static final int js_dialog_title=0x7f050193;
        /**  Default title for a javascript dialog 
         */
        public static final int js_dialog_title_default=0x7f050194;
        public static final int keyStore_columns=0x7f050003;
        /**  tel(ephone number), status (0:deleted 1:available), 
         */
        public static final int keyStore_database=0x7f050000;
        /**  SQL queries separated by ; progressive updates can be added here 
         */
        public static final int keyStore_indexlist=0x7f050005;
        public static final int keyStore_table=0x7f050001;
        /**  SQL create column syntax create table name (..., these entries, ...) 
         */
        public static final int keyStore_updates=0x7f050004;
        public static final int keyStore_version=0x7f050002;
        /**  Instructions telling the user how to unlock the phone. 
         */
        public static final int keyguard_label_text=0x7f050162;
        /**  Instructions telling the user to enter their pin to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public static final int keyguard_password_enter_pin_code=0x7f050160;
        /**  Instructions telling the user that they entered the wrong pin while trying
         to unlock the keyguard.  Displayed in one line in a large font.  
         */
        public static final int keyguard_password_wrong_pin_code=0x7f050161;
        /**  Suffix added to a number to signify size in kilobytes. 
         */
        public static final int kilobyteShort=0x7f050019;
        /**  Used to replace %s in urls retreived from the signin server with locales.  For Some        
 devices we don't support all the locales we ship to and need to replace the '%s' with a    
 locale string based on mcc values.  By default (0-length string) we don't replace the %s   
 at all and later replace it with a locale string based on the users chosen locale          
 DO NOT TRANSLATE 
         */
        public static final int locale_replacement=0x7f05029b;
        /**  On the keyguard screen, it shows the carrier the phone is connected to.  This is displayed if the phone is not connected to a carrier.
         */
        public static final int lockscreen_carrier_default=0x7f050164;
        /**  Button at the bottom of the unlock screen to make an emergency call. 
         */
        public static final int lockscreen_emergency_call=0x7f050169;
        /**  For the unlock screen, Information message shown in dialog when user is almost at the limit
         where they will be locked out and may have to enter an alternate username/password to unlock the phone 
         */
        public static final int lockscreen_failed_attempts_almost_glogin=0x7f050177;
        /**  On the unlock screen, message shown on button that appears once it's apparent the user may have forgotten
         their lock gesture 
         */
        public static final int lockscreen_forgot_pattern_button_text=0x7f050179;
        /**  In the unlock screen, message telling the user that they need to use their Google login and password to unlock the phone 
         */
        public static final int lockscreen_glogin_instructions=0x7f05017b;
        /**  Displayed to the user when unlocking the phone with a username and password fails. 
         */
        public static final int lockscreen_glogin_invalid_input=0x7f05017f;
        /**  Hint caption for the password field when unlocking the phone using login and password 
         */
        public static final int lockscreen_glogin_password_hint=0x7f05017d;
        /**  Button to try to unlock the phone using username and password 
         */
        public static final int lockscreen_glogin_submit_button=0x7f05017e;
        /**  Title of the unlock screen that uses your Google login and password 
         */
        public static final int lockscreen_glogin_too_many_attempts=0x7f05017a;
        /**  Hint caption for the username field when unlocking the phone using login and password 
         */
        public static final int lockscreen_glogin_username_hint=0x7f05017c;
        /**  On the keyguard screen, when pattern lock is disabled, only tell them to press menu to unlock.  This is shown in small font at the bottom. 
         */
        public static final int lockscreen_instructions_when_pattern_disabled=0x7f050167;
        /**  when pattern lock is enabled, tell them about the emergency dial 
         */
        public static final int lockscreen_instructions_when_pattern_enabled=0x7f050166;
        /**  When the lock screen is showing and the battery is low, warn user to plug
         in the phone soon. 
         */
        public static final int lockscreen_low_battery=0x7f05016d;
        /**  Shown in the lock screen to ask the user to insert a SIM card. 
         */
        public static final int lockscreen_missing_sim_instructions=0x7f050170;
        /**  Shown in the lock screen when there is no SIM card. 
         */
        public static final int lockscreen_missing_sim_message=0x7f05016f;
        /**  Shown in the lock screen when there is no SIM card. 
         */
        public static final int lockscreen_missing_sim_message_short=0x7f05016e;
        /**  When the user inserts a sim card from an unsupported network, it becomes network
         locked 
         */
        public static final int lockscreen_network_locked_message=0x7f050171;
        /**  Shown to confirm that the user entered their lock pattern correctly. 
         */
        public static final int lockscreen_pattern_correct=0x7f05016a;
        /**  On the unlock pattern screen, shown at the top of the unlock screen to tell the user what to do. Below this text is the place for theu ser to draw the pattern. 
         */
        public static final int lockscreen_pattern_instructions=0x7f050168;
        /**  On the unlock pattern screen, shown when the user enters the wrong lock pattern and must try again. 
         */
        public static final int lockscreen_pattern_wrong=0x7f05016b;
        /**  When the lock screen is showing and the phone plugged in, show the current
         charge %.  
         */
        public static final int lockscreen_plugged_in=0x7f05016c;
        /**  Shown in the lock screen to tell the user that the screen is locked. 
         */
        public static final int lockscreen_screen_locked=0x7f050165;
        /**  Shown in the lock screen to tell the user that their SIM is locked and they must unlock it. 
         */
        public static final int lockscreen_sim_locked_message=0x7f050174;
        /**  Shown in the lock screen when the SIM has become PUK locked and the user must call customer care to unlock it. 
         */
        public static final int lockscreen_sim_puk_locked_instructions=0x7f050173;
        /**  When the user enters a wrong sim pin too many times, it becomes
         PUK locked (Pin Unlock Kode) 
         */
        public static final int lockscreen_sim_puk_locked_message=0x7f050172;
        /**  For the unlock screen, When the user enters a sim unlock code, it takes a little while to check
         whether it is valid, and to unlock the sim if it is valid.  we display a
         progress dialog in the meantime.  this is the emssage. 
         */
        public static final int lockscreen_sim_unlock_progress_dialog_message=0x7f050175;
        /**  On the unlock screen, countdown message shown while user is waiting to try again after too many
         failed attempts 
         */
        public static final int lockscreen_too_many_failed_attempts_countdown=0x7f050178;
        /**  For the unlock screen, Information message shown in dialog when user has too many failed attempts 
         */
        public static final int lockscreen_too_many_failed_attempts_dialog_message=0x7f050176;
        /**  If the device is getting low on internal storage, a notification is shown to the user.  This is the message of that notification. 
         */
        public static final int low_internal_storage_view_text=0x7f050257;
        /**  If the device is getting low on internal storage, a notification is shown to the user.  This is the title of that notification. 
         */
        public static final int low_internal_storage_view_title=0x7f050256;
        /**  If MMS discovers there isn't much space left on the device, it will show a toast with this message. 
         */
        public static final int low_memory=0x7f050064;
        /**  Display name for any time a piece of data refers to the owner of the phone. For example, this could be used in place of the phone's phone number. 
         */
        public static final int me=0x7f050065;
        /**  Date format string used in contexts where the user has said they
         want the day of the month first, as used in Europe, with the month
         abbreviated.  You can remove the comma or add a period,
         or make other punctuation changes appropriate for your locale. 
         */
        public static final int medium_date_day_first=0x7f0501d8;
        /**  Date format string used in contexts where the user has said they
         want the month first, as used in the USA, with the month
         abbreviated.  You can remove the comma or add a period,
         or make other punctuation changes appropriate for your locale. 
         */
        public static final int medium_date_month_first=0x7f0501d7;
        /**  Suffix added to a number to signify size in megabytes. 
         */
        public static final int megabyteShort=0x7f05001a;
        /**  Displayed in place of the regular shortcut letter when a menu item has Menu+delete for the shortcut. 
         */
        public static final int menu_delete_shortcut_label=0x7f0501a1;
        /**  Displayed in place of the regular shortcut letter when a menu item has Menu+enter for the shortcut. 
         */
        public static final int menu_enter_shortcut_label=0x7f0501a0;
        /**  Displayed in place of the regular shortcut letter when a menu item has Menu+space for the shortcut. 
         */
        public static final int menu_space_shortcut_label=0x7f05019f;
        public static final int messageStore_columns=0x7f050009;
        /** 
	originator (mode: key request) 
	status (<=0:delete 1:working 2:ready 3:rsakey 4:received 5:rsasend 6:fail 7:decrypt)
	usersa (Default setting for new recipients added)
	e n d (RSA generated local keys) (recipient keys are kept in recipientStore e n.)
	decrypted copy of message using local e n d
	message copy of original SMS body received (always encrypted)
	(recipients are kept in recipientStore messageStore._id = recipientStore.messageid)
	
		mode: draft
		RSASMS: messageStore NEW decrypted=message text, queue=draft, usersa=mRSAToggle, status=1(working)
		RSASMS: recipientStore NEW rowId from draft as messageid, tel=number, contactid=_id(provider.contacts), status=1(working)
		
		
		// April 10, 2009 I'm planning to rename the service to MessageService as it handles more than just receiving messages.
		mode: ready for delivery from UI
		RSASMS: messageStore UPDATE rowId from draft, queue=outbox, status=2(ready)
		RSASMS: recipientStore UPDATE rowId from draft as messageid, status=2(ready)
		
		mode: ready for delivery from Service
		MessageReceiverService: android.intent.action.SERVICE_STATE
		MessageReceiverService: messageStore LOOKUPN decrypted where status is ready(2)
		MessageReceiverService: recipientStore LOOKUPN tel,usersa where messageid=messageStore._id
		
		
		MessageReceiverService: usersa=true: SEND tel "RSA SMS,"
		MessageReceiverService: usersa=true: recipientStore UPDATE status=3(rsawait)
		MessageReceiverService: usersa=false: SEND tel decrypted
		MessageReceiverService: usersa=false: recipientStore UPDATE status=4(sent)

		mode: key request
		MessageReceiverService: android.provider.Telephony.SMS_RECEIVED message contains "RSA SMS,"
		MessageReceiverService: GENERATE NEW RSA 1024 bit for e, n, d
		MessageReceiverService: messageStore NEW originator, e, n, d, usersa=mRSAToggle, status=3(rsakey)
		MessageReceiverService: SEND originator e, n formatted "RSAKEY:?@?:" (storage of int and status can be done after sending SMS)
		
		mode: receive key request reply
		MessageReceiverService: android.provider.Telephony.SMS_RECEIVED body contains "RSAKEY:e@n:"
		MessageReceiverService: recipientStore LOOKUPN _id where tel=originator and status=3(rsawait)
		MessageReceiverService: recipientStore UPDATE e, n, status=5(rsasend) (mid-state useful for diagnosing mid-process crashing, symptom duplicate encrypted replies)
		(Logic to be run on android.provider.Telephony.SMS_RECEIVED and android.intent.action.SERVICE_STATE and android.intent.action.BOOT_COMPLETE)
		MessageReceiverService: recipientStore LOOKUPN _id,messageid,e,n,tel where status=5(rsasend)
		MessageReceiverService: messageStore LOOKUP _id, decrypted where _id=messageid
		MessageReceiverService: SEND tel ENCRYPT decrypted using e,n formatted "RSASMS:?:"
		MessageReceiverService: recipientStore UPDATE status=4(sent)
		
		mode: receive message
		MessageReceiverService: android.provider.Telephony.SMS_RECEIVED body contains "RSASMS:message:"
		MessageReceiverService: messageStore NEW originator, message, queue=incoming, status=4(received)
		rsaDecode()
		MessageReceiverService: messageStore LOOKUPN originator, e, n, d, where status=3(rsakey) (multirow limit 10, most recent from originator with this status)
		MessageReceiverService: DECRYPT message with e, n, d (try out multiple)
		MessageReceiverService: messageStore NEW originator, message, decrypted, usersa=mRSAToggle, queue=inbox, e, n, status=4(received)
		MessageReceiverService: updateMessageBody with decrypted
		"Content-type: text/rsasms\n\n"

		android.provider.Telephony.SMS_RECEIVED
		android.provider.Telephony.SMS_SENT
		android.intent.action.SERVICE_STATE
		android.intent.action.BOOT_COMPLETED
		
	 
         */
        public static final int messageStore_database=0x7f050006;
        /**  SQL queries seperated by ; progressive updates can be added here 
         */
        public static final int messageStore_indexlist=0x7f05000b;
        public static final int messageStore_table=0x7f050007;
        /**  SQL create column syntax create table xxx (..., these entries, ...) 
         */
        public static final int messageStore_updates=0x7f05000a;
        public static final int messageStore_version=0x7f050008;
        /**  Quoted name for 12am, lowercase 
         */
        public static final int midnight=0x7f0501dd;
        /**  Appened to express the value is this unit of time: singular minute 
         */
        public static final int minute=0x7f0501af;
        /**  Appened to express the value is this unit of time: plural minutes 
         */
        public static final int minutes=0x7f0501b0;
        /**  Displayed when SIM PIN passwords are entered inconsistently. 
         */
        public static final int mismatchPin=0x7f05002e;
        /**  Displayed when a phone feature triggered by an MMI code is complete. 
         */
        public static final int mmiComplete=0x7f05002b;
        /**  Displayed when the user dialed an MMI code whose function
         could not be performed. This will be displayed in a toast. 
         */
        public static final int mmiError=0x7f050024;
        /**  Used in the list of which days of the week a calendar event recurrs on 
         */
        public static final int monday=0x7f0501b8;
        /**  Date format for month alone.
         Example: "October" 
         */
        public static final int month=0x7f0501e0;
        /**  Date format for month and day of month.
         Example: "October 9". 
         */
        public static final int month_day=0x7f0501df;
        /**  Date format for month, day, and year.
         Example: "October 9, 2007" 
         */
        public static final int month_day_year=0x7f0501e1;
        /**  The full spelled out version of the month. 
         */
        public static final int month_long_april=0x7f050227;
        /**  The full spelled out version of the month. 
         */
        public static final int month_long_august=0x7f05022b;
        /**  The full spelled out version of the month. 
         */
        public static final int month_long_december=0x7f05022f;
        /**  The full spelled out version of the month. 
         */
        public static final int month_long_february=0x7f050225;
        /**  The full spelled out version of the month. 
         */
        public static final int month_long_january=0x7f050224;
        /**  The full spelled out version of the month. 
         */
        public static final int month_long_july=0x7f05022a;
        /**  The full spelled out version of the month. 
         */
        public static final int month_long_june=0x7f050229;
        /**  The full spelled out version of the month. 
         */
        public static final int month_long_march=0x7f050226;
        /**  The full spelled out version of the month. 
         */
        public static final int month_long_may=0x7f050228;
        /**  The full spelled out version of the month. 
         */
        public static final int month_long_november=0x7f05022e;
        /**  The full spelled out version of the month. 
         */
        public static final int month_long_october=0x7f05022d;
        /**  The full spelled out version of the month. 
         */
        public static final int month_long_september=0x7f05022c;
        /**  An abbreviated month name.
        In US English: "Apr" stands for April. 
         */
        public static final int month_medium_april=0x7f050233;
        /**  An abbreviated month name.
        In US English: "Aug" stands for August. 
         */
        public static final int month_medium_august=0x7f050237;
        /**  An abbreviated month name.
        In US English: "Dec" stands for December. 
         */
        public static final int month_medium_december=0x7f05023b;
        /**  An abbreviated month name.
        In US English: "Feb" stands for February. 
         */
        public static final int month_medium_february=0x7f050231;
        /**  An abbreviated month name.
        In US English: "Jan" stands for January. 
         */
        public static final int month_medium_january=0x7f050230;
        /**  An abbreviated month name.
        In US English: "Jul" stands for July. 
         */
        public static final int month_medium_july=0x7f050236;
        /**  An abbreviated month name.
        In US English: "Jun" stands for June. 
         */
        public static final int month_medium_june=0x7f050235;
        /**  An abbreviated month name.
        In US English: "Mar" stands for March. 
         */
        public static final int month_medium_march=0x7f050232;
        /**  An abbreviated month name.
        In US English: "May" stands for May. 
         */
        public static final int month_medium_may=0x7f050234;
        /**  An abbreviated month name.
        In US English: "Nov" stands for November. 
         */
        public static final int month_medium_november=0x7f05023a;
        /**  An abbreviated month name.
        In US English: "Oct" stands for October. 
         */
        public static final int month_medium_october=0x7f050239;
        /**  An abbreviated month name.
        In US English: "Sep" stands for September. 
         */
        public static final int month_medium_september=0x7f050238;
        /**  An abbreviated month name.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "A" stands for April. 
         */
        public static final int month_shortest_april=0x7f05023f;
        /**  An abbreviated month name.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "A" stands for August. 
         */
        public static final int month_shortest_august=0x7f050243;
        /**  An abbreviated month name.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "D" stands for December. 
         */
        public static final int month_shortest_december=0x7f050247;
        /**  An abbreviated month name.  One character long if it makes sense.  Does not have
         to be unique.
        In US English: "F" stands for February. 
         */
        public static final int month_shortest_february=0x7f05023d;
        /**  An abbreviated month name.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "J" stands for January 
         */
        public static final int month_shortest_january=0x7f05023c;
        /**  An abbreviated month name.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "J" stands for July. 
         */
        public static final int month_shortest_july=0x7f050242;
        /**  An abbreviated month name.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "J" stands for June. 
         */
        public static final int month_shortest_june=0x7f050241;
        /**  An abbreviated month name.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "M" stands for March. 
         */
        public static final int month_shortest_march=0x7f05023e;
        /**  An abbreviated month name.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "M" stands for May. 
         */
        public static final int month_shortest_may=0x7f050240;
        /**  An abbreviated month name.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "N" stands for November. 
         */
        public static final int month_shortest_november=0x7f050246;
        /**  An abbreviated month name.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "O" stands for October. 
         */
        public static final int month_shortest_october=0x7f050245;
        /**  An abbreviated month name.  One character long if it makes sense.  Does not have
         to be unique.
         In US English: "S" stands for September. 
         */
        public static final int month_shortest_september=0x7f050244;
        /**  Date format for month and year.
         Example: "October 2007" 
         */
        public static final int month_year=0x7f0501e2;
        /**  Calendar spinner item, to select that an event recurs every month. 
         */
        public static final int monthly=0x7f0501c1;
        /**  Menu item displayed at the end of a menu to allow users to see another page worth of menu items. This is shown on any app's menu as long as the app has too many items in the menu.
         */
        public static final int more_item_label=0x7f05019d;
        /**  Displayed to prompt the user to type the PUK password to unlock
         the SIM card. 
         */
        public static final int needPuk=0x7f050030;
        public static final int needPuk2=0x7f050031;
        /**  Preference framework strings. 
         */
        public static final int no=0x7f05025b;
        /**  Text to display when there are no activities found to display in the
         activity chooser. See the "Select an action" title. 
         */
        public static final int noApplications=0x7f050263;
        /**  Shown for an application when it doesn't require any permission grants. 
         */
        public static final int no_permissions=0x7f050286;
        /**  Recent Tasks dialog 
         */
        public static final int no_recent_tasks=0x7f05006e;
        /**  Quoted name for 12pm, lowercase 
         */
        public static final int noon=0x7f0501db;
        /**  Numeric form of the day. Example: "12/31/2007" 
         */
        public static final int numeric_date=0x7f0501c9;
        /**  Format indicating a range of (numeric) dates.
          Example: "10/31 - 11/3" 
         */
        public static final int numeric_md1_md2=0x7f0501ed;
        /**  Format indicating a range of (numeric) dates and times.
          Example: "10/31, 8:00am - 11/3, 5:00pm" 
         */
        public static final int numeric_md1_time1_md2_time2=0x7f0501f1;
        /**  Format indicating a range of (numeric) dates.
          Example: "10/31/2007 - 11/3/2007" 
         */
        public static final int numeric_mdy1_mdy2=0x7f0501ef;
        /**  Format indicating a range of (numeric) dates and times.
          Example: "10/31/2007, 8:00am - 11/3/2007, 5:00pm"  
         */
        public static final int numeric_mdy1_time1_mdy2_time2=0x7f0501f3;
        /**  Format indicating a range of (numeric) dates and times.
          Example: "Wed, 10/31, 8:00am - Sat, 11/3, 5:00pm" 
         */
        public static final int numeric_wday1_md1_time1_wday2_md2_time2=0x7f0501f2;
        /**  Format indicating a range of (numeric) dates.
          Example: "Wed, 10/31 - Sat, 11/3" 
         */
        public static final int numeric_wday1_md1_wday2_md2=0x7f0501ee;
        /**  Format indicating a range of (numeric) dates and times.
          Example: "Wed, 10/31/2007, 8:00am - Sat, 11/3/2007, 5:00pm" 
         */
        public static final int numeric_wday1_mdy1_time1_wday2_mdy2_time2=0x7f0501f4;
        /**  Format indicating a range of (numeric) dates.
          Example: "Wed, 10/31/2007 - Sat, 11/3/2007" 
         */
        public static final int numeric_wday1_mdy1_wday2_mdy2=0x7f0501f0;
        /**  Preference framework strings. 
         */
        public static final int ok=0x7f050258;
        /**  String used to display the date. This is the string to say something happened 1 month ago. 
         */
        public static final int oneMonthDurationPast=0x7f0501a6;
        /**  Displayed to the user when they do not have permission to open a particular web page. 
         */
        public static final int open_permission_deny=0x7f05019b;
        /**  Displayed when a SIM password was entered incorrectly. 
         */
        public static final int passwordIncorrect=0x7f05002a;
        /**  Item on EditText context menu. This action is used t o paste from the clipboard into the eidt field 
         */
        public static final int paste=0x7f050251;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_accessCoarseLocation=0x7f050107;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_accessFineLocation=0x7f050105;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_accessLocationExtraCommands=0x7f050103;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_accessMockLocation=0x7f050101;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_accessNetworkState=0x7f05013f;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_accessSurfaceFlinger=0x7f050109;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_accessWifiState=0x7f050149;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_addSystemService=0x7f0500b1;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_batteryStats=0x7f0500c1;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_bindGadget=0x7f050129;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_bindInputMethod=0x7f0500cf;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_bluetooth=0x7f05014f;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_bluetoothAdmin=0x7f05014d;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_brick=0x7f050113;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_broadcastPackageRemoved=0x7f0500b5;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_broadcastSmsReceived=0x7f0500b7;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_broadcastSticky=0x7f0500f3;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_broadcastWapPush=0x7f0500b9;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_callPhone=0x7f050121;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_callPrivileged=0x7f050123;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_camera=0x7f050111;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_changeBackgroundDataSetting=0x7f050147;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_changeComponentState=0x7f0500e7;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_changeConfiguration=0x7f0500a7;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_changeNetworkState=0x7f050145;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_changeWifiState=0x7f05014b;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_checkinProperties=0x7f050127;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_clearAppCache=0x7f0500e1;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_clearAppUserData=0x7f0500d9;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_createNetworkSockets=0x7f050141;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_deleteCacheFiles=0x7f0500db;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_deletePackages=0x7f0500d7;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_devicePower=0x7f050131;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_diagnostic=0x7f0500e5;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_disableKeyguard=0x7f050151;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_dump=0x7f0500af;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_expandStatusBar=0x7f050091;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_factoryTest=0x7f050133;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_flashlight=0x7f05011d;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_forceBack=0x7f0500ad;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_fotaUpdate=0x7f0500bf;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_getAccounts=0x7f05013d;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_getPackageSize=0x7f0500dd;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_getTasks=0x7f0500a1;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_hardware_test=0x7f05011f;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_injectEvents=0x7f0500cb;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_installPackages=0x7f0500df;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_internalSystemWindow=0x7f0500c3;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_locationUpdates=0x7f050125;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_manageAppTokens=0x7f0500c9;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_masterClear=0x7f050139;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_modifyAudioSettings=0x7f05010d;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_modifyPhoneState=0x7f05012b;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_mount_format_filesystems=0x7f050119;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_mount_unmount_filesystems=0x7f050117;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_persistentActivity=0x7f0500d5;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_pkgUsageStats=0x7f0502ae;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_processOutgoingCalls=0x7f050093;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_readCalendar=0x7f0500fd;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_readContacts=0x7f0500f5;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_readDictionary=0x7f05015d;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_readFrameBuffer=0x7f05010b;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_readInputState=0x7f0500cd;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_readLogs=0x7f0500e3;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_readOwnerData=0x7f0500fb;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_readPhoneState=0x7f05012d;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_readSms=0x7f05009b;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_readSyncSettings=0x7f050153;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_readSyncStats=0x7f050157;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_reboot=0x7f050115;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_receiveBootCompleted=0x7f0500f1;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_receiveMms=0x7f050097;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_receiveSms=0x7f050095;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_receiveWapPush=0x7f05009f;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_recordAudio=0x7f05010f;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_reorderTasks=0x7f0500a3;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_restartPackages=0x7f0500a9;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_runSetActivityWatcher=0x7f0500b3;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_sendSms=0x7f050099;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_setAlwaysFinish=0x7f0500bd;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_setAnimationScale=0x7f0500c7;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_setDebugApp=0x7f0500a5;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_setOrientation=0x7f0500d1;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_setPreferredApplications=0x7f0500e9;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_setProcessForeground=0x7f0500ab;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_setProcessLimit=0x7f0500bb;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_setTimeZone=0x7f05013b;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_setWallpaper=0x7f050135;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_setWallpaperHints=0x7f050137;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_signalPersistentProcesses=0x7f0500d3;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_statusBar=0x7f05008f;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_subscribedFeedsRead=0x7f050159;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_subscribedFeedsWrite=0x7f05015b;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_systemAlertWindow=0x7f0500c5;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_vibrate=0x7f05011b;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_wakeLock=0x7f05012f;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_writeApnSettings=0x7f050143;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_writeCalendar=0x7f0500ff;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_writeContacts=0x7f0500f7;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_writeDictionary=0x7f05015f;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_writeGservices=0x7f0500ef;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_writeOwnerData=0x7f0500f9;
        public static final int permdesc_writeSecureSettings=0x7f0500ed;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_writeSettings=0x7f0500eb;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_writeSms=0x7f05009d;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permdesc_writeSyncSettings=0x7f050155;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgroupdesc_accounts=0x7f050085;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgroupdesc_costMoney=0x7f05007b;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgroupdesc_developmentTools=0x7f05008d;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgroupdesc_hardwareControls=0x7f050087;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgroupdesc_location=0x7f050081;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgroupdesc_messages=0x7f05007d;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgroupdesc_network=0x7f050083;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgroupdesc_personalInfo=0x7f05007f;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgroupdesc_phoneCalls=0x7f050089;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgroupdesc_systemTools=0x7f05008b;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgrouplab_accounts=0x7f050084;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgrouplab_costMoney=0x7f05007a;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgrouplab_developmentTools=0x7f05008c;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgrouplab_hardwareControls=0x7f050086;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgrouplab_location=0x7f050080;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgrouplab_messages=0x7f05007c;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgrouplab_network=0x7f050082;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgrouplab_personalInfo=0x7f05007e;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgrouplab_phoneCalls=0x7f050088;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permgrouplab_systemTools=0x7f05008a;
        /**  Do not translate. 
         */
        public static final int permissions_format=0x7f050285;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_accessCoarseLocation=0x7f050106;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_accessFineLocation=0x7f050104;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_accessLocationExtraCommands=0x7f050102;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_accessMockLocation=0x7f050100;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_accessNetworkState=0x7f05013e;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_accessSurfaceFlinger=0x7f050108;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_accessWifiState=0x7f050148;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_addSystemService=0x7f0500b0;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_batteryStats=0x7f0500c0;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_bindGadget=0x7f050128;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_bindInputMethod=0x7f0500ce;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_bluetooth=0x7f05014e;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_bluetoothAdmin=0x7f05014c;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_brick=0x7f050112;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_broadcastPackageRemoved=0x7f0500b4;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_broadcastSmsReceived=0x7f0500b6;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_broadcastSticky=0x7f0500f2;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_broadcastWapPush=0x7f0500b8;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_callPhone=0x7f050120;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_callPrivileged=0x7f050122;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_camera=0x7f050110;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_changeBackgroundDataSetting=0x7f050146;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_changeComponentState=0x7f0500e6;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_changeConfiguration=0x7f0500a6;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_changeNetworkState=0x7f050144;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_changeWifiState=0x7f05014a;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_checkinProperties=0x7f050126;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_clearAppCache=0x7f0500e0;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_clearAppUserData=0x7f0500d8;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_createNetworkSockets=0x7f050140;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_deleteCacheFiles=0x7f0500da;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_deletePackages=0x7f0500d6;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_devicePower=0x7f050130;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_diagnostic=0x7f0500e4;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_disableKeyguard=0x7f050150;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_dump=0x7f0500ae;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_expandStatusBar=0x7f050090;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_factoryTest=0x7f050132;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_flashlight=0x7f05011c;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_forceBack=0x7f0500ac;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_fotaUpdate=0x7f0500be;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_getAccounts=0x7f05013c;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_getPackageSize=0x7f0500dc;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_getTasks=0x7f0500a0;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_hardware_test=0x7f05011e;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_injectEvents=0x7f0500ca;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_installPackages=0x7f0500de;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_internalSystemWindow=0x7f0500c2;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_locationUpdates=0x7f050124;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_manageAppTokens=0x7f0500c8;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_masterClear=0x7f050138;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_modifyAudioSettings=0x7f05010c;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_modifyPhoneState=0x7f05012a;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_mount_format_filesystems=0x7f050118;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_mount_unmount_filesystems=0x7f050116;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_persistentActivity=0x7f0500d4;
        /**  permission attributes related to package usage statistics 
 Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_pkgUsageStats=0x7f0502ad;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_processOutgoingCalls=0x7f050092;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_readCalendar=0x7f0500fc;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_readContacts=0x7f0500f4;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_readDictionary=0x7f05015c;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_readFrameBuffer=0x7f05010a;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_readInputState=0x7f0500cc;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_readLogs=0x7f0500e2;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_readOwnerData=0x7f0500fa;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_readPhoneState=0x7f05012c;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_readSms=0x7f05009a;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_readSyncSettings=0x7f050152;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_readSyncStats=0x7f050156;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_reboot=0x7f050114;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_receiveBootCompleted=0x7f0500f0;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_receiveMms=0x7f050096;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_receiveSms=0x7f050094;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_receiveWapPush=0x7f05009e;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_recordAudio=0x7f05010e;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_reorderTasks=0x7f0500a2;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_restartPackages=0x7f0500a8;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_runSetActivityWatcher=0x7f0500b2;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_sendSms=0x7f050098;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_setAlwaysFinish=0x7f0500bc;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_setAnimationScale=0x7f0500c6;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_setDebugApp=0x7f0500a4;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_setOrientation=0x7f0500d0;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_setPreferredApplications=0x7f0500e8;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_setProcessForeground=0x7f0500aa;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_setProcessLimit=0x7f0500ba;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_setTimeZone=0x7f05013a;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_setWallpaper=0x7f050134;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_setWallpaperHints=0x7f050136;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_signalPersistentProcesses=0x7f0500d2;
        /**   Permissions 
 Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_statusBar=0x7f05008e;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_subscribedFeedsRead=0x7f050158;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_subscribedFeedsWrite=0x7f05015a;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_systemAlertWindow=0x7f0500c4;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_vibrate=0x7f05011a;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_wakeLock=0x7f05012e;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_writeApnSettings=0x7f050142;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_writeCalendar=0x7f0500fe;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_writeContacts=0x7f0500f6;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_writeDictionary=0x7f05015e;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_writeGservices=0x7f0500ee;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_writeOwnerData=0x7f0500f8;
        public static final int permlab_writeSecureSettings=0x7f0500ec;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_writeSettings=0x7f0500ea;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_writeSms=0x7f05009c;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public static final int permlab_writeSyncSettings=0x7f050154;
        /**  When installing an application, the less-dangerous permissions are hidden.  If the user showed those, this is the text to hide them again.  
         */
        public static final int perms_hide=0x7f050287;
        /**  When installing an application, the less-dangerous permissions are hidden.  This is the text to show those. 
         */
        public static final int perms_show_all=0x7f050288;
        /**  Suffix added to a number to signify size in petabytes. 
         */
        public static final int petabyteShort=0x7f05001d;
        /**  PM - as in afternoon - as in 10:30 PM 
         */
        public static final int pm=0x7f0501c8;
        /**  Title for the Phone Options dialog to lock the screen, turn off the phone etc. 
         */
        public static final int power_dialog=0x7f050066;
        /**  Button to turn off the phone, within the Phone Options dialog 
         */
        public static final int power_off=0x7f05006b;
        /**  Prepended to the shortcut for a menu item to indicate that the user should hold the MENU button together with the shortcut to invoke the item. For example, if the shortcut to open a new tab in browser is MENU and B together, then this would be prepended to the letter "B" 
         */
        public static final int prepend_shortcut_label=0x7f05019e;
        /**  String used to display the date. Preposition for date display ("on May 29") 
         */
        public static final int preposition_for_date=0x7f0501a8;
        /**  String used to display the date. Preposition for time display ("at 2:33am") 
         */
        public static final int preposition_for_time=0x7f0501a9;
        /**  String used to display the date. Preposition for year display ("in 2008") 
         */
        public static final int preposition_for_year=0x7f0501aa;
        public static final int recipientStore_columns=0x7f05000f;
        /**  messageid, recipient (number), contactid, status (0:deleted 1:working 2:ready 3:rsawait 4:sent 5:rsasend 6:sentwait 7:deliverywait 9:fail 10:rsawaitsentwait 11:rsawaitdeliverywait), 
         */
        public static final int recipientStore_database=0x7f05000c;
        /**  SQL queries seperated by ; progressive updates can be added here 
 alter table recipientStore add column useRSA text; //drop column doesn't appear to be available. 
         */
        public static final int recipientStore_indexlist=0x7f050011;
        public static final int recipientStore_table=0x7f05000d;
        /**  SQL create column syntax create table xxx (..., these entries, ...) 
         */
        public static final int recipientStore_updates=0x7f050010;
        public static final int recipientStore_version=0x7f05000e;
        /**  Format indicating a relative expression and time.
         Example: "4 hours ago, 11:00 am" 
         */
        public static final int relative_time=0x7f0501d3;
        public static final int reply_button_dialog=0x7f0502bd;
        /**  Choice in the ringtone picker.  If chosen, the default ringtone will be used. 
         */
        public static final int ringtone_default=0x7f050278;
        /**  Choice in the ringtone picker.  If chosen, the default ringtone will be used. This fills in the actual ringtone's title into the message. 
         */
        public static final int ringtone_default_with_actual=0x7f050279;
        /**  The title of the ringtone picker dialog. 
         */
        public static final int ringtone_picker_title=0x7f05027b;
        /**  Choice in the ringtone picker.  If chosen, there will be silence instead of a ringtone played. 
         */
        public static final int ringtone_silent=0x7f05027a;
        /**  If there is ever a ringtone set for some setting, but that ringtone can no longer be resolved, t his is shown instead.  For example, if the ringtone was on a SD card and it had been removed, this woudl be shown for ringtones on that SD card. 
         */
        public static final int ringtone_unknown=0x7f05027c;
        /**  Displayed to the user to tell them that they have started up the phone in "safe mode" 
         */
        public static final int safeMode=0x7f050078;
        /**  Format indicating a range of dates.
          Example: "Oct 9 - 10" 
         */
        public static final int same_month_md1_md2=0x7f0501f5;
        /**  Format indicating a range of dates and times.
          Example: "Oct 9, 8:00am - Oct 10, 5:00pm"  
         */
        public static final int same_month_md1_time1_md2_time2=0x7f0501f9;
        /**  Format indicating a range of dates.
          Example: "Oct 9 - 10, 2007" 
         */
        public static final int same_month_mdy1_mdy2=0x7f0501f7;
        /**  Format indicating a range of dates and times.
          Example: "Oct 9, 2007, 8:00am - Oct 10, 2007, 5:00pm"  
         */
        public static final int same_month_mdy1_time1_mdy2_time2=0x7f0501fb;
        /**  Format indicating a range of dates and times.
          Example: "Tue, Oct 9, 8:00am - Wed, Oct 10, 5:00pm"  
         */
        public static final int same_month_wday1_md1_time1_wday2_md2_time2=0x7f0501fa;
        /**  Format indicating a range of dates.
          Example: "Tue, Oct 9 - Wed, Oct 10"  
         */
        public static final int same_month_wday1_md1_wday2_md2=0x7f0501f6;
        /**  Format indicating a range of dates and times.
          Example: "Tue, Oct 9, 2007, 8:00am - Wed, Oct 10, 2007, 5:00pm" 
         */
        public static final int same_month_wday1_mdy1_time1_wday2_mdy2_time2=0x7f0501fc;
        /**  Format indicating a range of dates.
          Example: "Tue, Oct 9, 2007 - Wed, Oct 10, 2007"  
         */
        public static final int same_month_wday1_mdy1_wday2_mdy2=0x7f0501f8;
        /**  Format indicating a range of dates in the same year.
         Example: "Oct 31 - Nov 3" 
         */
        public static final int same_year_md1_md2=0x7f0501e5;
        /**  Format indicating a range of time from a time on one day to a time on another.
         Example: "Oct 31, 8:00am - Nov 3, 5:00pm" 
         */
        public static final int same_year_md1_time1_md2_time2=0x7f0501e9;
        /**  Format indicating a range of dates in the same year.
         Example: "Oct 31 - Nov 3, 2007" 
         */
        public static final int same_year_mdy1_mdy2=0x7f0501e7;
        /**  Format indicating a range of time from a time on one day to a time on another, with years and weekdays.
         Example: "Oct 31, 2007, 8:00am - Nov 3, 2007, 5:00pm" 
         */
        public static final int same_year_mdy1_time1_mdy2_time2=0x7f0501eb;
        /**  Format indicating a range of time from a time on one day to a time on another, with weekdays.
         Example: "Wed, Oct 31, 8:00am - Sat, Nov 3, 5:00pm" 
         */
        public static final int same_year_wday1_md1_time1_wday2_md2_time2=0x7f0501ea;
        /**  Format indicating a range of dates in the same year, with weekday.
         Example: "Wed, Oct 31 - Sat, Nov 3" 
         */
        public static final int same_year_wday1_md1_wday2_md2=0x7f0501e6;
        /**  Format indicating a range of time from a time on one day to a time on another.
     Example: "Wed, Oct 31, 2007, 8:00am - Sat, Nov 3, 2007, 5:00pm" 
         */
        public static final int same_year_wday1_mdy1_time1_wday2_mdy2_time2=0x7f0501ec;
        /**  Format indicating a range of dates in the same year, with weekdays.
         Example: "Wed, Oct 31 - Sat, Nov 3, 2007" 
         */
        public static final int same_year_wday1_mdy1_wday2_mdy2=0x7f0501e8;
        /**  Used in the list of which days of the week a calendar event recurrs on 
         */
        public static final int saturday=0x7f0501bd;
        /**  Title of the WebView save password dialog.  If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. 
         */
        public static final int save_password_label=0x7f050196;
        /**  If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. Text in the save password dialog, asking if the browser should remember a password. 
         */
        public static final int save_password_message=0x7f050197;
        /**  Button in the save password dialog, saying never to remember this password. This should be short. Should be "Never for this site". But it is too long, use "Never" instead 
         */
        public static final int save_password_never=0x7f05019a;
        /**  If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. Button in the save password dialog, saying not to remember this password. 
         */
        public static final int save_password_notnow=0x7f050198;
        /**  If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. Button in the save password dialog, saying to remember this password. 
         */
        public static final int save_password_remember=0x7f050199;
        /**  Button to lock the screen, within the Phone Options dialog 
         */
        public static final int screen_lock=0x7f05006a;
        /**  This is the default button label in the system-wide search UI. 
         It is also used by the home screen's search "widget". It should be short 
         */
        public static final int search_go=0x7f0501a2;
        /**  Appened to express the value is this unit of time. 
         */
        public static final int second=0x7f0501b1;
        /**  Appened to express the value is this unit of time. 
         */
        public static final int seconds=0x7f0501b2;
        /**  Item on EditText context menu. This action is used to select all text in the edit field. 
         */
        public static final int selectAll=0x7f05024a;
        /**  Item on EditText context menu. This action is used to start selecting text in the edit field. 
         */
        public static final int selectText=0x7f05024b;
        /**  Name of the dialog that lets the user choose an accented character to insert 
         */
        public static final int select_character=0x7f05027d;
        /**  Title of the pop-up dialog in which the user switches input method components. 
         */
        public static final int select_input_method=0x7f05029c;
        /**  Displayed in the title of the chooser for things to do with text that
         is to be sent to another application. For example, I can send text through SMS or IM.  A dialog with those choices would be shown, and this would be the title. 
         */
        public static final int sendText=0x7f05026f;
        public static final int send_button_dialog=0x7f0502b9;
        /**  Example: Service was enabled for: Voice, Data 
         */
        public static final int serviceClassData=0x7f050045;
        /**  Meaning: asynchronous data.  Example: Service was enabled for: Voice, Async 
         */
        public static final int serviceClassDataAsync=0x7f050048;
        /**  Meaning: synchronous data.  Example: Service was enabled for: Voice, Async 
         */
        public static final int serviceClassDataSync=0x7f050049;
        /**  Example: Service was enabled for: Voice, FAX 
         */
        public static final int serviceClassFAX=0x7f050046;
        /**  Meaning: unknown.  Example: Service was enabled for: Voice, PAD 
         */
        public static final int serviceClassPAD=0x7f05004b;
        /**  Meaning: packet data.  Example: Service was enabled for: Voice, Packet 
         */
        public static final int serviceClassPacket=0x7f05004a;
        /**  Example: Service was enabled for: Voice, SMS 
         */
        public static final int serviceClassSMS=0x7f050047;
        /**  Example: Service was enabled for: Voice, Data 
         */
        public static final int serviceClassVoice=0x7f050044;
        /**  Displayed when a phone feature such as call forwarding was deactivated. 
         */
        public static final int serviceDisabled=0x7f050027;
        /**  Displayed when a phone feature such as call barring was activated. 
         */
        public static final int serviceEnabled=0x7f050025;
        /**  Displayed in front of the list of a set of service classes
         (voice, data, fax, etc.) that were enabled. 
         */
        public static final int serviceEnabledFor=0x7f050026;
        /**  Displayed when a phone property such as a SIM password was erased. 
         */
        public static final int serviceErased=0x7f050029;
        /**  Displayed to tell the user that caller ID is not provisioned for their SIM. 
         */
        public static final int serviceNotProvisioned=0x7f05003d;
        /**  Displayed when a phone property such as a SIM password was registered. 
         */
        public static final int serviceRegistered=0x7f050028;
        /**  Shutdown Confirmation Dialog.  When the user chooses to power off the phone, there will be a confirmation dialog.  This is the message. 
         */
        public static final int shutdown_confirm=0x7f05006d;
        /**  Shutdown Progress Dialog. This is shown if the user chooses to power off the phone. 
         */
        public static final int shutdown_progress=0x7f05006c;
        /**  Button to turn on silent mode, within the Phone Options dialog 
         */
        public static final int silent_mode=0x7f050067;
        /**  See SMS_DIALOG.  This is shown if the current application's name cannot be figuerd out. 
         */
        public static final int sms_control_default_app_name=0x7f05027e;
        /**  See SMS_DIALOG.  This is the message shown in that dialog. 
         */
        public static final int sms_control_message=0x7f050280;
        /**  See SMS_DIALOG.  This is a button choice to disallow sending the SMSes.. 
         */
        public static final int sms_control_no=0x7f050282;
        /**  SMS_DIALOG: An SMS dialog is shown if an application tries to send too many SMSes.  This is the title of that dialog. 
         */
        public static final int sms_control_title=0x7f05027f;
        /**  See SMS_DIALOG.  This is a button choice to allow sending the SMSes. 
         */
        public static final int sms_control_yes=0x7f050281;
        /**  The text for the button in the notification window-shade that clears
         all of the currently visible notifications. 
         */
        public static final int status_bar_clear_all_button=0x7f050185;
        /**  The label for the group of notifications for recent events in the opened version of
         the status bar.  Recently received text messsages (SMS), emails, calendar alerts, etc. 
         */
        public static final int status_bar_latest_events_title=0x7f050188;
        /**  The label in the bar at the top of the status bar when there are no notifications
         showing. 
         */
        public static final int status_bar_no_notifications_title=0x7f050186;
        /**  The label for the group of notifications for ongoing events in the opened version of
         the status bar.  An ongoing call is the prime example of this.  The MP3 music player
         might be another example.  
         */
        public static final int status_bar_ongoing_events_title=0x7f050187;
        /**  A format string for 12-hour time of day (example: "12:30 PM"). 
         */
        public static final int status_bar_time_format=0x7f050180;
        /**  Item on EditText context menu. This action is used to start selecting text in the edit field. 
         */
        public static final int stopSelectingText=0x7f05024c;
        /**  Used in the list of which days of the week a calendar event recurrs on 
         */
        public static final int sunday=0x7f0501b7;
        /**  Suffix added to a number to signify size in terabytes. 
         */
        public static final int terabyteShort=0x7f05001c;
        /**  Displayed to the user to confirm that they have copied text from a web page to the clipboard. 
         */
        public static final int text_copied=0x7f05019c;
        /**  Used in the list of which days of the week a calendar event recurrs on 
         */
        public static final int thursday=0x7f0501bb;
        /**  Format indicating a range of times, from one time to another.
         Example: "10:00 - 11:00 am" 
         */
        public static final int time1_time2=0x7f0501ce;
        /**  Format indicating a range of times on a particular date.
         Example: "8:00 - 11:00 am, Dec 31, 2007" 
         */
        public static final int time_date=0x7f0501d1;
        /**  A format string for 24-hour time of day (example "23:59"). 
         */
        public static final int time_of_day=0x7f0501e3;
        /**  Format indicating a range of times on a particular day of the week.
         Example: "8:00 - 11:00 am, Mon" 
         */
        public static final int time_wday=0x7f0501d4;
        /**  Format indicating a range of times on a particular date.
         Example: "8:00 - 11:00 am, Mon, Dec 31, 2007" 
         */
        public static final int time_wday_date=0x7f0501cf;
        /**  String used to display the date. This is shown instead of a date if the date is today's date. 
         */
        public static final int today=0x7f0501a3;
        /**  String used to display the date. This is shown instead of a date if the date is tomorrow's date. 
         */
        public static final int tomorrow=0x7f0501a5;
        /**  Used in the list of which days of the week a calendar event recurrs on 
         */
        public static final int tuesday=0x7f0501b9;
        /**  Button to turn off the radio, within the Phone Options dialog 
         */
        public static final int turn_off_radio=0x7f050069;
        /**  Button to turn on the radio, within the Phone Options dialog 
         */
        public static final int turn_on_radio=0x7f050068;
        /**  Shown in the tutorial for tap twice for zoom control. 
         */
        public static final int tutorial_double_tap_to_zoom_message_short=0x7f0502af;
        /**  Time format string used in the status bar when the user has said they
         want a 12-hour clock with AM and PM.
         You can remove the colon
         or make other punctuation changes appropriate for your locale. 
         */
        public static final int twelve_hour_time_format=0x7f0501d9;
        /**  Time format string used in the status bar when the user has said they
         want a 24-hour clock.
         You can remove the colon
         or make other punctuation changes appropriate for your locale. 
         */
        public static final int twenty_four_hour_time_format=0x7f0501da;
        /**  How to display the lack of a name 
         */
        public static final int unknownName=0x7f050021;
        /**  Used in Contacts for a field that has no label and in Note Pad
         for a note with no name. 
         */
        public static final int untitled=0x7f05001e;
        /**  See USB_STORAGE.    This is the button text to mount the phone on the computer. 
         */
        public static final int usb_storage_button_mount=0x7f05028c;
        /**  See USB_STORAGE.   This is the button text to ignore the plugging in of the phone.. 
         */
        public static final int usb_storage_button_unmount=0x7f05028d;
        /**  See USB_STORAGE_DIALOG.  If there was an error mounting, this is the text. 
         */
        public static final int usb_storage_error_message=0x7f05028e;
        /**  See USB_STORAGE.    This is the message. 
         */
        public static final int usb_storage_message=0x7f05028b;
        /**  See USB_STORAGE. This is the message. 
         */
        public static final int usb_storage_notification_message=0x7f050290;
        /**  USB_STORAGE: When the user connects the phone to a computer via USB, we show a notification asking if he wants to share files across.  This is the title 
         */
        public static final int usb_storage_notification_title=0x7f05028f;
        /**  See USB_STORAGE_STOP.    This is the button text to stop usb storage. 
         */
        public static final int usb_storage_stop_button_mount=0x7f050295;
        /**  See USB_STORAGE_STOP.   This is the button text to cancel stoping usb storage. 
         */
        public static final int usb_storage_stop_button_unmount=0x7f050296;
        /**  See USB_STORAGE_STOP_DIALOG.  If there was an error stopping, this is the text. 
         */
        public static final int usb_storage_stop_error_message=0x7f050297;
        /**  See USB_STORAGE_STOP.    This is the message. 
         */
        public static final int usb_storage_stop_message=0x7f050294;
        /**  See USB_STORAGE. This is the message. 
         */
        public static final int usb_storage_stop_notification_message=0x7f050292;
        /**  USB_STORAGE_STOP: While USB storage is enabled, we show a notification dialog asking if he wants to stop. This is the title 
         */
        public static final int usb_storage_stop_notification_title=0x7f050291;
        /**  USB storage stop dialog strings 
 This is the label for the activity, and should never be visible to the user. 
 See USB_STORAGE_STOP.  USB_STORAGE_STOP_DIALOG:  After the user selects the notification, a dialog is shown asking if he wants to stop usb storage.  This is the title. 
         */
        public static final int usb_storage_stop_title=0x7f050293;
        /**  USB storage dialog strings 
 This is the label for the activity, and should never be visible to the user. 
 See USB_STORAGE.  USB_STORAGE_DIALOG:  After the user selects the notification, a dialog is shown asking if he wants to mount.  This is the title. 
         */
        public static final int usb_storage_title=0x7f05028a;
        public static final int version=0x7f0502bc;
        /**  Title of the dialog where the user is adjusting the audio volume for alarms 
         */
        public static final int volume_alarm=0x7f050275;
        /**  Title of the dialog where the user is adjusting the phone call volume when connected on bluetooth
         */
        public static final int volume_bluetooth_call=0x7f050274;
        /**  Title of the dialog where the user is adjusting the phone call volume 
         */
        public static final int volume_call=0x7f050273;
        /**  Title of the dialog where the user is adjusting the music volume 
         */
        public static final int volume_music=0x7f050271;
        /**  Hint shown in the volume toast to inform the user that the media audio is playing through Bluetooth. 
         */
        public static final int volume_music_hint_playing_through_bluetooth=0x7f050272;
        /**  Title of the dialog where the user is adjusting the audio volume for notifications 
         */
        public static final int volume_notification=0x7f050276;
        /**  Title of the dialog where the user is adjusting the phone ringer volume 
         */
        public static final int volume_ringtone=0x7f050270;
        /**  Title of the dialog where the user is adjusting the general audio volume 
         */
        public static final int volume_unknown=0x7f050277;
        /**  Button allowing the user to choose to wait for an application that is not responding to become responsive again. 
         */
        public static final int wait=0x7f05026d;
        /**  Format indicating a range of time, from a time on one day to a time on another day. 
         Example: "Mon, Dec 31, 2007, 8am - Tue, Jan 1, 2008, 5pm" 
         */
        public static final int wday1_date1_time1_wday2_date2_time2=0x7f0501ca;
        /**  Format indicating a range of dates, from one date to another.
         Example: "Mon, Dec 31, 2007 - Tue, Jan 1, 2008" 
         */
        public static final int wday1_date1_wday2_date2=0x7f0501cb;
        /**  Format indicating a weekday and date.
         Example: "Mon, Dec 31, 2007" 
         */
        public static final int wday_date=0x7f0501d0;
        /**  Do not translate.  WebView User Agent string 
         */
        public static final int web_user_agent=0x7f050192;
        /**  Used in the list of which days of the week a calendar event recurrs on 
         */
        public static final int wednesday=0x7f0501ba;
        /**  Appened to express the value is this unit of time. 
         */
        public static final int week=0x7f0501b3;
        /**  Calendar spinner item, to select that an event recurs every week on a particular day of the week. 
         */
        public static final int weekly=0x7f0501c0;
        /**  Appened to express the value is this unit of time. 
         */
        public static final int weeks=0x7f0501b4;
        public static final int welcome=0x7f0502ba;
        /**  Title of intent resolver dialog when selecting an application to run. 
         */
        public static final int whichApplication=0x7f05025f;
        public static final int wordStore_columns=0x7f050015;
        public static final int wordStore_database=0x7f050012;
        /**  SQL queries seperated by ; progressive updates can be added here 
         */
        public static final int wordStore_indexlist=0x7f050017;
        public static final int wordStore_table=0x7f050013;
        /**  SQL create column syntax create table xxx (..., these entries, ...) 
         */
        public static final int wordStore_updates=0x7f050016;
        public static final int wordStore_version=0x7f050014;
        /**  Appened to express the value is this unit of time. 
         */
        public static final int year=0x7f0501b5;
        /**  Calendar spinner item, to select that an event recurs every year. 
         */
        public static final int yearly=0x7f0501c2;
        /**  Appened to express the value is this unit of time. 
         */
        public static final int years=0x7f0501b6;
        /**  Preference framework strings. 
         */
        public static final int yes=0x7f05025a;
        /**  String used to display the date. This is shown instead of a date if the date is yesterday's date. 
         */
        public static final int yesterday=0x7f0501a4;
    }
    public static final class style {
        public static final int Theme_ClearDialog=0x7f080002;
        public static final int Theme_NoBackground=0x7f080000;
        public static final int Theme_Pad=0x7f080001;
    }
    public static final class xml {
        public static final int preferences=0x7f040000;
    }
}
